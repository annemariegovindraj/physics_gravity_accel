import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;

/* sh gives the position, im[sh gives the nb of the image 0 to 4 or highlighted 5-9
occ accupied by fixed shape
*/

public class Rowof3 extends Applet implements KeyListener, Runnable  , MouseListener
{int h=0, hh=0;
 int score=0, counter=0,  pauselength=350, A=16, B=20, rectwidth=25, level=1;//a for row, B column
 int sh[]=new int[3]; //position of the shape
 int [] im=new int[A*B];  boolean [] occ=new boolean[A*B]; ///img and occupancy of fixed shapes
 int [] refimgsh= new int[3]; ///refnb of img of falling shapes
   int allincrements[]={-1,1};//,-A,A,-A-1,-A+1,A+1,A-1};
 int select[]; int [] selectleft;
  Image offScreenImage; Graphics offS; 
 Image img[]=new Image[10];
 Thread game; boolean gameover=true, intro=true, highlighting=false;
 Font fat = new Font ("Dialog", Font.BOLD,18); 
 Random rm=new Random();
 Color liteblue=new Color(151,203,255);

public void init()
{offScreenImage=createImage(A*rectwidth, B*rectwidth+60);
 offS=offScreenImage.getGraphics(); offS.setFont(fat);
 addMouseListener(this);
 addKeyListener(this);  requestFocus();
 pauselength=Integer.parseInt(getParameter("pause"));
  repaint();}

public void start()
{if(game==null)  {game=new Thread(this);}
 game.start();
}
public void readyingForStart()
{for (int i=0; i<B*A;i++){im[i]=-1; occ[i]=false;}
 createNewShape(); gameover=false;
 score=0; repaint();}
 
public void stop()
{if(game!=null)  { game=null;} } 

public void run()
{if(intro==true){ repaint();
  int tracked=0; String name[]= new String[10]; 
  try{MediaTracker tracker = new MediaTracker(this);
      StringTokenizer mst= new StringTokenizer(getParameter("img"),"$");
      while(mst.hasMoreTokens()&&tracked<10)      
	{name[tracked]=mst.nextToken();
	img[tracked]=getImage(getClass().getResource(name[tracked]+".gif"));
	tracker.addImage(img[tracked], tracked);  tracked++;}
      tracker.waitForAll();
    }catch(InterruptedException e){showStatus("No picture found");}

 try {  synchronized(this){while(intro==true) wait();}  }catch(InterruptedException e){}; 
 intro=false; readyingForStart(); }
 while (gameover==false)
{int max=(B-1)*A;
 if((sh[0]>=max)||(sh[1]>=max)||(sh[2]>=max)){fixshape(); }
 else if((occ[sh[0]+A]==false)&&(occ[sh[1]+A]==false)&&(occ[sh[2]+A]==false))
   { sh[0]=sh[0]+A;sh[1]=sh[1]+A;sh[2]=sh[2]+A;}  /////free fall
 else {fixshape();}
 repaint();
  try { game.sleep(pauselength);  }catch(InterruptedException e){}; 
  }
  repaint();}
  
public void fixshape()
{for(int s=0;s<3;s++)
	{occ[sh[s]]=true; im[sh[s]]=refimgsh[s];}
 for (int s=0;s<3;s++)
 {int fullrow=checkForRow(sh[s]);
  if(fullrow>2)
	{if (fullrow>=5){score+=100;}
	 else if(fullrow>=4) {score+=50;}
	 else if(fullrow>=3){score+=10;} 
	 highlighting=true; repaint();
	 try { game.sleep(600);  }catch(InterruptedException e){}; 
 	highlighting=false;
	for(int w=0;w<fullrow;w++)
	{int j=select[w];
     while(j>=A){occ[j]=occ[j-A];im[j]=im[j-A];
	j-=A;} //remove the row and let squares fall
	//occ[j]=false; im[j]=-1;
	}repaint(); 
   	 try { game.sleep(600);  }catch(InterruptedException e){}; 
   }}
  if(occ[6]==true){gameover=true; repaint(); 
       try { game.sleep(3000);  }catch(InterruptedException e){}; 
	   readyingForStart();}
  counter++; 
  createNewShape();
  }
public void createNewShape()
{int counter=rm.nextInt()%6;if(counter<0) counter=-counter; 
  switch(counter)
  {case 0 :	case 4: sh[0]=5; sh[1]=6; sh[2]=7; break;
   case 1 : 	 sh[0]=5+A; sh[1]=6; sh[2]=6+A; break;
   case 2 :	case 5 : sh[0]=6; sh[1]=6+A; sh[2]=6+2*A; break;
   case 3 : 	 sh[0]=7+A; sh[1]=6; sh[2]=6+A; break;
   default : 	 sh[0]=6; sh[1]=7; sh[2]=8; break;
  }
 int rsh=rm.nextInt()%5;if(rsh<0) rsh=-rsh; 
  switch(rsh)
 {case 0 :	 refimgsh[0]=rsh; refimgsh[1]=rsh; refimgsh[2]=(rsh+1)%5; break;
 case 1 :  	 refimgsh[0]=rsh; refimgsh[1]=(rsh+1)%5; refimgsh[2]=(rsh+2)%5; break;
 case 2 :	  refimgsh[0]=rsh; refimgsh[1]=(rsh+3)%5; refimgsh[2]=(rsh+1)%5; break;
 case 3:      refimgsh[0]=rsh; refimgsh[1]=(rsh+2)%5; refimgsh[2]=rsh; break;
 case 4 :     refimgsh[0]=rsh; refimgsh[1]=(rsh+3)%5; refimgsh[2]=(rsh+2)%5; break;
 default :    refimgsh[0]=rsh; refimgsh[1]=rsh; refimgsh[2]=rsh; break;
 	}
 }
public int checkForRow(int shi) 
{  int incr=1;
 
  //for(int incrnb=0; incrnb<allincrements.length; incrnb++)
   // {incr=allincrements[incrnb];
 select=new int[15];selectleft=new int[15];
 for(int i=0;i<15;i++){select[i] =-1;selectleft[i] =-1;}  
 h=0;  select[h]=shi;  hh=0; 
  while(im[select[h]]==im[select[h]+incr]){h++; select[h]=select[h-1]+incr;}
  selectleft[hh]=shi; 
 while(im[selectleft[hh]]==im[selectleft[hh]-incr]){hh++; selectleft[hh]=selectleft[hh-1]-incr;}
 if(hh>0){for(int jj=1 ; jj<=hh;jj++){select[h+jj]=selectleft[jj];}}//transferring left to selectarray
 h= (h+hh+1);// if(h>2) {return h;}
 // else{incrnb++; }
 // } 
        
return h;}
  
public void keyPressed(KeyEvent ke)
{ if(gameover ==false)
  {if(ke.getKeyCode()==KeyEvent.VK_LEFT) //left arrow
     {if((sh[0]%A==0)||(sh[1]%A==0)||(sh[2]%A==0)){}
	  else if((occ[sh[0]-1]==false)&&(occ[sh[1]-1]==false)&&(occ[sh[2]-1]==false))
		{sh[0]=sh[0]-1; sh[1]=sh[1]-1; sh[2]=sh[2]-1;}
	 }
   else if(ke.getKeyCode()==KeyEvent.VK_RIGHT)
     {if((sh[0]%A==A-1)||(sh[1]%A==A-1)||(sh[2]%A==A-1)){}
       else if((occ[sh[0]+1]==false)&&(occ[sh[1]+1]==false)&&(occ[sh[2]+1]==false))
             { sh[0]=sh[0]+1; sh[1]=sh[1]+1; sh[2]=sh[2]+1;}
	 }
   else if(ke.getKeyCode()==KeyEvent.VK_UP) //up arrow
    {int nx=newpos(sh[0],sh[1]);int nz=newpos(sh[2],sh[1]); ///sh[1]= rotation axis
	  if(((sh[0]%A==A-1)&&(nx%A==0))||((sh[2]%A==A-1)&&(nz==0)))
	   {}  ///exclude left border
	   else if(((sh[0]%A==0)&&(nx%A==A-1))||((sh[2]%A==0)&&(nz==A-1)))
	   {}  ///exclude right border
	 else if((occ[nx]==false)&&(occ[nz]==false))
   {   sh[0]=nx;sh[2]=nz;}  /////OK rotate
   }
   else if(ke.getKeyCode()==KeyEvent.VK_DOWN) //down arrow
    {}
} }
public int newpos(int shi, int shy)
{/////turning counterclockwise
 int ni= shy-(shy/A)+(shi/A)-A*(shi%A-shy%A); 
 return ni;}

public void keyReleased(KeyEvent ke){};
public void keyTyped(KeyEvent ke){};

synchronized public void mouseClicked(MouseEvent me)
  { intro=false; notify(); }
public void mousePressed(MouseEvent me) {}
public void mouseReleased(MouseEvent me) {}
public void mouseEntered(MouseEvent me) {}
public void mouseExited(MouseEvent me) {}

public void update(Graphics g)
{if (gameover==false)
  {offS.setColor(liteblue); offS.fillRect(0,0,A*rectwidth,B*rectwidth);
 ///paint occupied spaces
 for(int i=0; i<A*B;i++)
 {if(occ[i]==true)
  {int m=i/A;
   offS.drawImage(img[im[i]],(i%A)*rectwidth,m*rectwidth,this);}}
 //paint moving shape
  for(int s=0; s<3;s++)
{ int m=sh[s]/A; 
 offS.drawImage(img[refimgsh[s]],(sh[s]%A)*rectwidth,m*rectwidth,this);}
if(highlighting==true) {for(int i=0; i<h; i++)
 {int m=select[i]/A; offS.drawImage(img[im[select[i]]+5],((select[i])%A)*rectwidth,m*rectwidth,this);}}
 
 offS.setColor(Color.black);
    for(int i=0;i<=A;i++) offS.drawLine(i*rectwidth,0,i*rectwidth,B*rectwidth); //verticals
    for(int i=0;i<=B;i++) offS.drawLine(0, i*rectwidth,A*rectwidth,i*rectwidth); //horizontals
 }
  offS.setColor(new Color(255,253,225));  offS.fillRect(0,B*rectwidth, A*rectwidth,60);
  offS.setColor(Color.black);  offS.drawString("Score : "+score, 20, B*rectwidth+26);
 paint(g);}

public void paint(Graphics g)
{ if (gameover==false)
   {g.drawImage(offScreenImage, 0,0, this);
    g.setColor(Color.black); g.drawString("right "+h+" select "+select[0]+" "+select[1]+" "+select[2]+"left "+hh+" select "+selectleft[0]+" "+selectleft[1]+" "+selectleft[2], 20, 100);
  }
else if(intro==true){g.setColor(Color.blue);  g.fillRect(0,0,A*rectwidth, B*rectwidth+60);
   g.setColor(Color.yellow); g.setFont(fat); g.drawString("START",80,200);}
 else if (occ[6]==true)
 {g.setColor(liteblue);   g.fillRect(0,0,A*rectwidth, B*rectwidth+60);
   g.setColor(Color.blue); g.setFont(fat);
   if (score>400){g.drawString("Good score, Congratulations", 2,150);}
  g.drawString("START",80,300);}
}}
